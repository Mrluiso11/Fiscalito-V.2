/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vistas.form;

import Style.Forms;
import conexion.Conexion;
import java.awt.Container;
import java.sql.Connection;
import controladores.*;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JTextField;
import javax.swing.JOptionPane;

/**
 *
 * @author dbpan
 */
public class frmServicio extends javax.swing.JPanel {

    private Container bgContainer;
    String operacion = "";
    private ArrayList<JTextField> camposDeTexto = new ArrayList<>();
    private JTextField[] textFieldsToStyle = new JTextField[3];
    Icon customIcon = new ImageIcon(getClass().getResource("/img/check_icon2.png"));

    /**
     * Creates new form frmArticulos
     */
    public frmServicio() {
        initComponents();
        bgContainer = this;
        Forms formsPanel = new Forms(bgContainer, jPTitle);
        textFieldsToStyle[0] = txtNombreServicio;
        textFieldsToStyle[1] = txtPrecio;
        textFieldsToStyle[2] = txtCodigoServicio;
        inhabilitar();
        ObtenerNombreServicio();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        jPTitle = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCodigoServicio = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cbxImpuesto = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        btnEliminar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        cbxTipoCobro = new javax.swing.JComboBox<>();
        btnGuardar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaDescripcion = new javax.swing.JTextArea();
        txtNombreServicio = new javax.swing.JTextField();
        cbxServicios = new javax.swing.JComboBox<>();

        setOpaque(false);

        bg.setBackground(new java.awt.Color(255, 255, 255));
        bg.setOpaque(false);
        bg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPTitle.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(125, 125, 125));
        jLabel1.setText("DATOS DE SERVICIO");

        javax.swing.GroupLayout jPTitleLayout = new javax.swing.GroupLayout(jPTitle);
        jPTitle.setLayout(jPTitleLayout);
        jPTitleLayout.setHorizontalGroup(
            jPTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPTitleLayout.setVerticalGroup(
            jPTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        bg.add(jPTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 1040, 50));
        bg.add(txtCodigoServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 180, 370, -1));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Impuesto (%) :");
        bg.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 510, -1, -1));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Código de Servicio :");
        bg.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 160, 130, -1));

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Descripción :");
        bg.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 240, -1, -1));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("Tipo de cobro:");
        bg.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 390, -1, -1));
        bg.add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 470, 220, -1));

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("Precio :");
        bg.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 450, -1, -1));

        cbxImpuesto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "7", "10", "15" }));
        cbxImpuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxImpuestoActionPerformed(evt);
            }
        });
        bg.add(cbxImpuesto, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 530, 90, -1));

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("Nombre del Servicio :");
        bg.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 160, -1, -1));

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        bg.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 710, 120, 40));

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        bg.add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 710, 120, 40));

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        bg.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 100, 120, 40));

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        bg.add(btnEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 710, 120, 40));

        cbxTipoCobro.setForeground(new java.awt.Color(102, 102, 102));
        cbxTipoCobro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Por Hora", "Por Día", "Por Semana", "Por Mes", "Por Año" }));
        cbxTipoCobro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxTipoCobroActionPerformed(evt);
            }
        });
        bg.add(cbxTipoCobro, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 410, 230, -1));

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        bg.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 710, 120, 40));

        txtaDescripcion.setColumns(20);
        txtaDescripcion.setRows(5);
        jScrollPane1.setViewportView(txtaDescripcion);

        bg.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 260, 980, 120));
        bg.add(txtNombreServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 180, 450, -1));

        cbxServicios.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        bg.add(cbxServicios, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 110, 380, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, 1096, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, 840, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ObtenerNombreServicio() {
        // Instanciar la clase Clientes
        Servicios servicio = new Servicios();
        Connection conexion = Conexion.obtenerConexion();

        try {
            // Establecer la conexión a la base de datos aquí

            List<String> Servicios = servicio.getAllServicios(conexion);

            // Limpiar el JComboBox antes de agregar los nuevos elementos
            cbxServicios.removeAllItems();

            for (String nombreservicio : Servicios) {
                cbxServicios.addItem(nombreservicio);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Cerrar la conexión a la base de datos aquí
        }
    }


    private void cbxTipoCobroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxTipoCobroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxTipoCobroActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        operacion = "nuevo";
        habilitar();
        btnBuscar.setEnabled(false);
        btnNuevo.setEnabled(false);
        btnEditar.setEnabled(false);
        btnEliminar.setEnabled(false);
        cbxServicios.setEnabled(false);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        operacion = "modificar";
        habilitar();
        btnEditar.setEnabled(false);
        btnBuscar.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnNuevo.setEnabled(false);
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // Obtiene una conexión a la base de datos.
        Connection conexion = Conexion.obtenerConexion();
        Servicios obj_insertServicios = new Servicios();

        // Verifica si el campo del Código de Servicio está vacío.
        if (txtCodigoServicio.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "El Codigo de Servicio no puede estar vacío", "Error", JOptionPane.ERROR_MESSAGE);
            txtCodigoServicio.requestFocus();
        } else {

            if (conexion != null) {
                // Asigna los valores de los campos a las propiedades del objeto Servicios.
                obj_insertServicios.setCodigoservicio(txtCodigoServicio.getText().trim());
                obj_insertServicios.setNombreservicio(txtNombreServicio.getText().trim());
                obj_insertServicios.setDescripcion(txtaDescripcion.getText().trim());
                obj_insertServicios.setTipocobro(cbxTipoCobro.getSelectedItem().toString());
                obj_insertServicios.setPrecio(Float.parseFloat(txtPrecio.getText().trim()));
                obj_insertServicios.setItbms(Double.parseDouble(cbxImpuesto.getSelectedItem().toString()));

                // Comprueba si se está realizando una operación de inserción o modificación.
                if (operacion.equals("nuevo")) {
                    // Obtiene una lista de códigos de servicios existentes en la base de datos.
                    List<String> codigosServicios = obj_insertServicios.getAllCServicios(conexion);
                    // Recorre la lista de códigos de servicios.
                    for (String cservicios : codigosServicios) {
                        // Comprueba si el código del servicio ya existe en la base de datos.
                        if (cservicios.equals(txtCodigoServicio.getText())) {
                            // Muestra un mensaje de error y detiene el flujo si el código existe.
                            JOptionPane.showMessageDialog(null, "Este código del servicio ya existe.", "Error", JOptionPane.ERROR_MESSAGE);
                            return; // Sale del método actual y detiene el flujo del programa
                        }
                    }
                    int filasAfectadas = obj_insertServicios.insertServicio(conexion, obj_insertServicios);
                    if (filasAfectadas > 0) {
                        limpiarCampos();
                        // Notifica al usuario que los datos se han guardado con éxito.
                        JOptionPane.showMessageDialog(null, "Los datos se han guardado con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE, customIcon);
                        btnNuevo.setEnabled(true);
                        cbxServicios.setEnabled(true);
                    } else {
                        // Notifica al usuario que los datos no se han podido guardar.
                        JOptionPane.showMessageDialog(null, "Los datos no se han podido guardar", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else if (operacion.equals("modificar")) {
                    int filasAfectadas = obj_insertServicios.updateServicioporCodigo(conexion, obj_insertServicios);
                    if (filasAfectadas > 0) {
                        inhabilitar();
                        limpiarCampos();
                        // Notifica al usuario que los datos se han actualizado con éxito.
                        JOptionPane.showMessageDialog(null, "Los datos se han actualizado con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE, customIcon);
                        btnNuevo.setEnabled(true);
                    } else {
                        // Notifica al usuario que los datos no se han podido actualizar.
                        JOptionPane.showMessageDialog(null, "Los datos no se han podido actualizar", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }

                // Cierra la conexión a la base de datos.
                Conexion.cerrarConexion(conexion);
            }
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // Obtiene una conexión a la base de datos.
        Connection conexion = Conexion.obtenerConexion();
        Servicios servicio = new Servicios(); // Crear un objeto de la clase Servicios

        if (conexion != null) {
            // Establece el nombre del servicio seleccionado en el ComboBox.
            servicio.setNombreservicio(cbxServicios.getSelectedItem().toString());
            servicio.InfoServicioPorNombre(conexion); // Llama al método en la clase Servicios para obtener información del servicio.
            Conexion.cerrarConexion(conexion);
        }

        // Rellena los campos de la interfaz con la información del servicio encontrado.
        txtNombreServicio.setText(servicio.getNombreservicio());
        txtCodigoServicio.setText(servicio.getCodigoservicio());
        txtaDescripcion.setText(servicio.getDescripcion());
        cbxTipoCobro.setSelectedItem(servicio.getTipocobro());
        txtPrecio.setText(String.valueOf(servicio.getPrecio()));
        cbxImpuesto.setSelectedItem(servicio.getItbms());

        if (servicio.getNombreservicio() != null) {
            // Servicio encontrado, habilita los botones de edición y eliminación.
            btnEditar.setEnabled(true);
            btnEliminar.setEnabled(true);
            btnNuevo.setEnabled(false);
        } else {
            // Servicio no encontrado, deshabilita los botones de edición y eliminación.
            btnEditar.setEnabled(false);
            btnEliminar.setEnabled(false);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void cbxImpuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxImpuestoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxImpuestoActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // Obtiene una conexión a la base de datos.
        Connection conexion = Conexion.obtenerConexion();

        // Crea un objeto de la clase Servicios para manejar los datos del servicio.
        Servicios servicios = new Servicios();

        if (conexion != null) {
            String nombre = txtNombreServicio.getText();

            // Muestra un cuadro de diálogo de confirmación antes de eliminar el servicio.
            int opcion = JOptionPane.showConfirmDialog(null, "¿Está seguro de querer eliminar este servicio?", "Confirmación", JOptionPane.YES_NO_OPTION);

            if (opcion == JOptionPane.YES_OPTION) {
                servicios.setCodigoservicio(txtCodigoServicio.getText().trim());

                // Llama al método para eliminar el servicio por su código.
                int filasAfectadas = servicios.deleteServicioporCodigo(conexion);

                // Cierra la conexión a la base de datos.
                Conexion.cerrarConexion(conexion);

                if (filasAfectadas > 0) {
                    // Notifica al usuario que el servicio se ha eliminado con éxito.
                    JOptionPane.showMessageDialog(null, "El servicio: " + nombre + " se ha eliminado con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE, customIcon);
                    btnNuevo.setEnabled(true);

                    // Limpia los campos después de eliminar el servicio.
                    limpiarCampos();
                } else {
                    // Notifica al usuario que no se ha podido eliminar el servicio.
                    JOptionPane.showMessageDialog(null, "El servicio: " + nombre + " no se ha podido eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
                    btnNuevo.setEnabled(true);
                }
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    public void inhabilitar() {
        // Deshabilita campos y botones para evitar la edición.
        txtNombreServicio.setEnabled(false);
        txtCodigoServicio.setEnabled(true);
        txtaDescripcion.setEnabled(false);
        txtPrecio.setEnabled(false);
        cbxTipoCobro.setEnabled(false);
        cbxImpuesto.setEnabled(false);
        btnGuardar.setEnabled(false);
        btnEditar.setEnabled(false);
        btnEliminar.setEnabled(false);
        btnBuscar.setEnabled(true);
        txtCodigoServicio.setEnabled(false);
        txtaDescripcion.setBackground(new Color(214, 234, 248)); // Cambia el fondo del campo de descripción.
        colorTexfiel(); // Llama al método para establecer estilos de campo.
    }

    public void habilitar() {
        // Habilita campos y botones para permitir la edición.
        txtNombreServicio.setEnabled(true);
        txtCodigoServicio.setEnabled(true);
        txtaDescripcion.setEnabled(true);
        txtPrecio.setEnabled(true);
        cbxTipoCobro.setEnabled(true);
        cbxImpuesto.setEnabled(true);
        btnGuardar.setEnabled(true);
        btnEditar.setEnabled(true);
        btnEliminar.setEnabled(true);
        txtaDescripcion.setBackground(Color.WHITE); // Restablece el fondo del campo de descripción a blanco.
        colorTexfiel(); // Llama al método para establecer estilos de campo.
    }

    public void limpiarCampos() {
        // Limpia el contenido de todos los campos de texto y reinicia los campos relacionados con nombres y códigos.
        for (JTextField campo : camposDeTexto) {
            campo.setText("");
        }
        txtNombreServicio.setText("");
        txtCodigoServicio.setText("");
        txtaDescripcion.setText("");
        txtPrecio.setText("");
    }

    public void colorTexfiel() {
        // Establece el color de fondo para los campos de texto habilitados y deshabilitados.

        for (JTextField textField : textFieldsToStyle) {
            if (textField != null) { // Verifica que el textField no sea nulo.
                if (!textField.isEnabled()) {
                    // Cambia el color de fondo y texto para campos deshabilitados.
                    textField.setBackground(new Color(214, 234, 248));
                } else {
                    // Restablece los colores originales para campos habilitados.
                    textField.setBackground(Color.WHITE);
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bg;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JComboBox<String> cbxImpuesto;
    private javax.swing.JComboBox<String> cbxServicios;
    private javax.swing.JComboBox<String> cbxTipoCobro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPTitle;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtCodigoServicio;
    private javax.swing.JTextField txtNombreServicio;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextArea txtaDescripcion;
    // End of variables declaration//GEN-END:variables
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vistas.form;

import Style.CustomTabbedPaneUI;
import Style.CustomTableHeaderRenderer;
import Style.Forms;
import Style.TableStyler;
import javax.swing.table.DefaultTableModel;
import controladores.*;
import java.util.ArrayList;
import java.util.List;
import conexion.Conexion;
import java.sql.Connection;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.JTableHeader;

/**
 *
 * @author dbpan
 */
public class frmAdministracion extends javax.swing.JPanel {

    Icon customIcon = new ImageIcon(getClass().getResource("/img/check_icon2.png"));
    String vNombre = "";

    /**
     * Creates new form frmAdministracion
     */
    public frmAdministracion() {
        initComponents();
        cargarProductos();
        cargarServicios();
        cargarClientes();
        Forms formsPanel = new Forms(this, jPLProductos);

        // Aplica los estilos a la tabla de productos
        applyTableStyles(tbl_Productos, jScrollPane1);
        // Aplica los estilos a la tabla de servicios
        applyTableStyles(tbl_Servicios, jScrollPane2);
        // Aplica los estilos a la tabla de clientes
        applyTableStyles(tbl_Clientes, jScrollPane3);
        // Aplica la interfaz de usuario personalizada al JTabbedPane "jTabbedPane1"
        jTabbedPane1.setUI(new CustomTabbedPaneUI());
        applyStylesToTitlePanel(jPLServicios);
        applyStylesToTitlePanel(jPLCLientes);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Articulos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_Productos = new javax.swing.JTable();
        btnBorrarP = new javax.swing.JButton();
        btnActualizarP = new javax.swing.JButton();
        jPLProductos = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Servicios = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_Servicios = new javax.swing.JTable();
        jPLServicios = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnActualizarS = new javax.swing.JButton();
        btnBorrarS = new javax.swing.JButton();
        Clientes = new javax.swing.JPanel();
        jPLCLientes = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbl_Clientes = new javax.swing.JTable();
        btnActualizarC = new javax.swing.JButton();
        btnBorrarC = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1096, 846));

        bg.setBackground(new java.awt.Color(245, 245, 245));

        jTabbedPane1.setBackground(new java.awt.Color(245, 245, 245));
        jTabbedPane1.setOpaque(true);

        Articulos.setBackground(new java.awt.Color(245, 245, 245));

        tbl_Productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo de Artículo", "Nombre del Artículo", "Descripción", "Magnitud", "Precio", "Impuesto", "Fecha de registro", "Fecha de actualizacipon"
            }
        ));
        jScrollPane1.setViewportView(tbl_Productos);

        btnBorrarP.setText("Borrar");
        btnBorrarP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarPActionPerformed(evt);
            }
        });

        btnActualizarP.setText("Actualizar");
        btnActualizarP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarPActionPerformed(evt);
            }
        });

        jPLProductos.setBackground(new java.awt.Color(255, 255, 255));
        jPLProductos.setToolTipText("");
        jPLProductos.setPreferredSize(new java.awt.Dimension(870, 47));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(125, 125, 125));
        jLabel1.setText("Listado de Artículos");

        javax.swing.GroupLayout jPLProductosLayout = new javax.swing.GroupLayout(jPLProductos);
        jPLProductos.setLayout(jPLProductosLayout);
        jPLProductosLayout.setHorizontalGroup(
            jPLProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPLProductosLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(612, 612, 612))
        );
        jPLProductosLayout.setVerticalGroup(
            jPLProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout ArticulosLayout = new javax.swing.GroupLayout(Articulos);
        Articulos.setLayout(ArticulosLayout);
        ArticulosLayout.setHorizontalGroup(
            ArticulosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ArticulosLayout.createSequentialGroup()
                .addGroup(ArticulosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ArticulosLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 962, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ArticulosLayout.createSequentialGroup()
                        .addGap(818, 818, 818)
                        .addComponent(btnActualizarP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBorrarP)))
                .addContainerGap(66, Short.MAX_VALUE))
            .addGroup(ArticulosLayout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jPLProductos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ArticulosLayout.setVerticalGroup(
            ArticulosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ArticulosLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jPLProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(ArticulosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnActualizarP, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBorrarP, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Artículos", Articulos);

        Servicios.setBackground(new java.awt.Color(245, 245, 245));

        tbl_Servicios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo del Servicio", "Nombre del Servicio", "Descripcion", "Tipo de Cobro", "Precio", "Impuesto", "Fecha de registo", "Fecha de actualizacion"
            }
        ));
        jScrollPane2.setViewportView(tbl_Servicios);

        jPLServicios.setBackground(new java.awt.Color(255, 255, 255));
        jPLServicios.setPreferredSize(new java.awt.Dimension(867, 50));
        jPLServicios.setRequestFocusEnabled(false);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(125, 125, 125));
        jLabel2.setText("Listado de Servicios");

        javax.swing.GroupLayout jPLServiciosLayout = new javax.swing.GroupLayout(jPLServicios);
        jPLServicios.setLayout(jPLServiciosLayout);
        jPLServiciosLayout.setHorizontalGroup(
            jPLServiciosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPLServiciosLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(622, Short.MAX_VALUE))
        );
        jPLServiciosLayout.setVerticalGroup(
            jPLServiciosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
        );

        btnActualizarS.setText("Actualizar");
        btnActualizarS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarSActionPerformed(evt);
            }
        });

        btnBorrarS.setText("Borrar");
        btnBorrarS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ServiciosLayout = new javax.swing.GroupLayout(Servicios);
        Servicios.setLayout(ServiciosLayout);
        ServiciosLayout.setHorizontalGroup(
            ServiciosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ServiciosLayout.createSequentialGroup()
                .addGroup(ServiciosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ServiciosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ServiciosLayout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnActualizarS)
                            .addGap(59, 59, 59)
                            .addComponent(btnBorrarS))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ServiciosLayout.createSequentialGroup()
                            .addGap(66, 66, 66)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 967, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ServiciosLayout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(jPLServicios, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        ServiciosLayout.setVerticalGroup(
            ServiciosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ServiciosLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jPLServicios, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(ServiciosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBorrarS, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnActualizarS, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(66, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Servicios", Servicios);

        Clientes.setBackground(new java.awt.Color(245, 245, 245));

        jPLCLientes.setBackground(new java.awt.Color(255, 255, 255));
        jPLCLientes.setPreferredSize(new java.awt.Dimension(867, 50));
        jPLCLientes.setRequestFocusEnabled(false);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(125, 125, 125));
        jLabel3.setText("Listado de Clientes");

        javax.swing.GroupLayout jPLCLientesLayout = new javax.swing.GroupLayout(jPLCLientes);
        jPLCLientes.setLayout(jPLCLientesLayout);
        jPLCLientesLayout.setHorizontalGroup(
            jPLCLientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPLCLientesLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(622, Short.MAX_VALUE))
        );
        jPLCLientesLayout.setVerticalGroup(
            jPLCLientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
        );

        tbl_Clientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo del Cliente", "RUC", "Nombre", "Dirección", "Telefono 1", "Telefono 2", "Correo", "Observaciones", "Fecha de registro", "Fecha de actualización"
            }
        ));
        jScrollPane3.setViewportView(tbl_Clientes);

        btnActualizarC.setText("Actualizar");
        btnActualizarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarCActionPerformed(evt);
            }
        });

        btnBorrarC.setText("Borrar");
        btnBorrarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ClientesLayout = new javax.swing.GroupLayout(Clientes);
        Clientes.setLayout(ClientesLayout);
        ClientesLayout.setHorizontalGroup(
            ClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientesLayout.createSequentialGroup()
                .addGroup(ClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(ClientesLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnActualizarC)
                        .addGap(59, 59, 59)
                        .addComponent(btnBorrarC))
                    .addGroup(ClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(ClientesLayout.createSequentialGroup()
                            .addGap(104, 104, 104)
                            .addComponent(jPLCLientes, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(ClientesLayout.createSequentialGroup()
                            .addGap(66, 66, 66)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 967, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        ClientesLayout.setVerticalGroup(
            ClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientesLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jPLCLientes, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(ClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBorrarC, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnActualizarC, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Clientes", Clientes);

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bgLayout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
private void applyTableStyles(JTable table, JScrollPane scrollPane) {
        TableStyler tableStyler = new TableStyler();
        TableStyler.applyStyles(table);  // Aplica estilos a la tabla
        tableStyler.fixTable(scrollPane); // Configura la apariencia del JScrollPane
        CustomTableHeaderRenderer.applyStylesToHeader(table); // Aplica estilos al encabezado de la tabla
    }

    private void applyStylesToTitlePanel(JPanel titlePanel) {
        Forms formsPanel = new Forms(this, titlePanel);
    }
    private void btnActualizarPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarPActionPerformed
        cargarProductos();
    }//GEN-LAST:event_btnActualizarPActionPerformed

    private void btnActualizarSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarSActionPerformed
        cargarServicios();
    }//GEN-LAST:event_btnActualizarSActionPerformed

    private void btnActualizarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarCActionPerformed
        cargarClientes();
    }//GEN-LAST:event_btnActualizarCActionPerformed

    private void btnBorrarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarCActionPerformed
        delectCliente();
    }//GEN-LAST:event_btnBorrarCActionPerformed

    private void btnBorrarPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarPActionPerformed
        getCodigoArticulo();
    }//GEN-LAST:event_btnBorrarPActionPerformed

    private void btnBorrarSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarSActionPerformed
        delectServicio();
    }//GEN-LAST:event_btnBorrarSActionPerformed

    // Método para eliminar un cliente
    private void delectCliente() {
        // Establecer la conexión a la base de datos
        Connection conexion = Conexion.obtenerConexion();
        // Crear una instancia de la clase Clientes para gestionar clientes
        Clientes cliente = new Clientes();

        // Obtener la fila seleccionada en la tabla
        int filaSeleccionada = tbl_Clientes.getSelectedRow();

        // Verificar si hay una fila seleccionada
        if (filaSeleccionada != -1) {
            // Obtener el modelo de la tabla
            DefaultTableModel modelo = (DefaultTableModel) tbl_Clientes.getModel();

            // Intentar obtener y convertir a entero el valor en la celda de la columna 1 (considerando la base 0)
            try {
                // Mostrar un cuadro de confirmación al usuario
                int opcion = JOptionPane.showConfirmDialog(
                        null,
                        "¿Está seguro de querer eliminar este Cliente?",
                        "Confirmación",
                        JOptionPane.YES_NO_OPTION
                );
                // Obtener el valor de la celda y convertirlo a cadena
                Object valorCelda = modelo.getValueAt(filaSeleccionada, 1);

                // Verificar que el valor de la celda no sea nulo
                if (valorCelda != null) {
                    // Convertir el valor de la celda a entero
                    String ruc = valorCelda.toString();

                    // Verificar si el usuario confirmó la eliminación
                    if (opcion == JOptionPane.YES_OPTION) {
                        // Establecer el RUC del cliente a eliminar en el objeto "cliente"
                        cliente.setRuc(ruc);

                        // Llamar al método "deleteClientePorRuc" en la clase "Clientes" para eliminar el cliente de la base de datos
                        int filasAfectadas = cliente.deleteClientePorRuc(conexion);

                        // Cerrar la conexión a la base de datos
                        Conexion.cerrarConexion(conexion);

                        // Verificar si se eliminaron filas con éxito
                        if (filasAfectadas > 0) {
                            // Mostrar un mensaje de éxito si se eliminaron filas
                            JOptionPane.showMessageDialog(
                                    null,
                                    "Cliente eliminado con éxito.",
                                    "Éxito",
                                    JOptionPane.INFORMATION_MESSAGE,
                                    customIcon
                            );
                        } else {
                            // Mostrar un mensaje de error si no se eliminaron filas
                            JOptionPane.showMessageDialog(
                                    null,
                                    "No se pudo eliminar el cliente.",
                                    "Error",
                                    JOptionPane.ERROR_MESSAGE
                            );
                        }
                    }
                }
            } catch (NumberFormatException e) {
                // Manejar error en caso de que la conversión a entero falle
                System.out.println("Error al convertir el valor a entero: " + e.getMessage());
            }
        } else {
            // Mostrar un mensaje de error si no se seleccionó ninguna fila en la tabla
            JOptionPane.showMessageDialog(
                    null,
                    "No se ha seleccionado ninguna fila en la tabla.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

// Método para eliminar un servicio
    private void delectServicio() {
        // Establecer la conexión a la base de datos
        Connection conexion = Conexion.obtenerConexion();
        // Crear una instancia de la clase Servicios para gestionar servicios
        Servicios servicio = new Servicios();

        // Obtener la fila seleccionada en la tabla
        int filaSeleccionada = tbl_Servicios.getSelectedRow();

        // Verificar si hay una fila seleccionada
        if (filaSeleccionada != -1) {
            // Obtener el modelo de la tabla
            DefaultTableModel modelo = (DefaultTableModel) tbl_Servicios.getModel();

            // Intentar obtener y convertir a entero el valor en la celda de la columna 1 (considerando la base 0)
            try {
                // Mostrar un cuadro de confirmación al usuario
                int opcion = JOptionPane.showConfirmDialog(
                        null,
                        "¿Está seguro de querer eliminar este Servicio?",
                        "Confirmación",
                        JOptionPane.YES_NO_OPTION
                );
                // Obtener el valor de la celda y convertirlo a cadena
                Object valorCelda = modelo.getValueAt(filaSeleccionada, 0);

                // Verificar que el valor de la celda no sea nulo
                if (valorCelda != null) {
                    // Convertir el valor de la celda a entero
                    String cServicio = valorCelda.toString();

                    // Verificar si el usuario confirmó la eliminación
                    if (opcion == JOptionPane.YES_OPTION) {
                        // Establecer el código del servicio a eliminar en el objeto "servicio"
                        servicio.setCodigoservicio(cServicio);

                        // Llamar al método "deleteServicioporCodigo" en la clase "Servicios" para eliminar el servicio de la base de datos
                        int filasAfectadas = servicio.deleteServicioporCodigo(conexion);

                        // Cerrar la conexión a la base de datos
                        Conexion.cerrarConexion(conexion);

                        // Verificar si se eliminaron filas con éxito
                        if (filasAfectadas > 0) {
                            // Mostrar un mensaje de éxito si se eliminaron filas
                            JOptionPane.showMessageDialog(
                                    null,
                                    "Servicio eliminado con éxito.",
                                    "Éxito",
                                    JOptionPane.INFORMATION_MESSAGE,
                                    customIcon
                            );
                        } else {
                            // Mostrar un mensaje de error si no se eliminaron filas
                            JOptionPane.showMessageDialog(
                                    null,
                                    "No se pudo eliminar el servicio.",
                                    "Error",
                                    JOptionPane.ERROR_MESSAGE
                            );
                        }
                    }
                }
            } catch (NumberFormatException e) {
                // Manejar error en caso de que la conversión a entero falle
                System.out.println("Error al convertir el valor a entero: " + e.getMessage());
            }
        } else {
            // Mostrar un mensaje de error si no se seleccionó ninguna fila en la tabla
            JOptionPane.showMessageDialog(
                    null,
                    "No se ha seleccionado ninguna fila en la tabla.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

// Método para obtener el código de un artículo seleccionado
    private void getCodigoArticulo() {
        // Establecer la conexión a la base de datos
        Connection conexion = Conexion.obtenerConexion();
        // Crear una instancia de la clase Articulos para gestionar artículos
        Articulos articulo = new Articulos();

        // Obtener la fila seleccionada en la tabla
        int filaSeleccionada = tbl_Productos.getSelectedRow();

        // Verificar si hay una fila seleccionada
        if (filaSeleccionada != -1) {
            // Obtener el modelo de la tabla
            DefaultTableModel modelo = (DefaultTableModel) tbl_Productos.getModel();

            // Intentar obtener y convertir a entero el valor en la celda de la columna 1 (considerando la base 0)
            try {
                // Mostrar un cuadro de confirmación al usuario
                int opcion = JOptionPane.showConfirmDialog(
                        null,
                        "¿Está seguro de querer eliminar este Articulo?",
                        "Confirmación",
                        JOptionPane.YES_NO_OPTION
                );
                // Obtener el valor de la celda y convertirlo a cadena
                Object valorCelda = modelo.getValueAt(filaSeleccionada, 0);

                // Verificar que el valor de la celda no sea nulo
                if (valorCelda != null) {
                    // Convertir el valor de la celda a entero
                    String cArticulo = valorCelda.toString();

                    // Verificar si el usuario confirmó la eliminación
                    if (opcion == JOptionPane.YES_OPTION) {
                        // Establecer el código del artículo a eliminar en el objeto "articulo"
                        articulo.setCodigoproducto(cArticulo);

                        // Llamar al método "deleteProductoporCodigo" en la clase "Articulos" para eliminar el artículo de la base de datos
                        int filasAfectadas = articulo.deleteProductoporCodigo(conexion);

                        // Cerrar la conexión a la base de datos
                        Conexion.cerrarConexion(conexion);

                        // Verificar si se eliminaron filas con éxito
                        if (filasAfectadas > 0) {
                            // Mostrar un mensaje de éxito si se eliminaron filas
                            JOptionPane.showMessageDialog(
                                    null,
                                    "Artículo eliminado con éxito.",
                                    "Éxito",
                                    JOptionPane.INFORMATION_MESSAGE,
                                    customIcon
                            );
                        } else {
                            // Mostrar un mensaje de error si no se eliminaron filas
                            JOptionPane.showMessageDialog(
                                    null,
                                    "No se pudo eliminar el artículo.",
                                    "Error",
                                    JOptionPane.ERROR_MESSAGE
                            );
                        }
                    }
                }
            } catch (NumberFormatException e) {
                // Manejar error en caso de que la conversión a entero falle
                System.out.println("Error al convertir el valor a entero: " + e.getMessage());
            }
        } else {
            // Mostrar un mensaje de error si no se seleccionó ninguna fila en la tabla
            JOptionPane.showMessageDialog(
                    null,
                    "No se ha seleccionado ninguna fila en la tabla.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    private void cargarProductos() {
        Connection conexion = Conexion.obtenerConexion();
        DefaultTableModel modelo = (DefaultTableModel) tbl_Productos.getModel();

        // Limpiar cualquier contenido que pueda haber en la tabla actualmente
        modelo.setRowCount(0);

        // Crear una instancia de Articulos para obtener los datos de la base de datos
        Articulos obj_productos = new Articulos();

        // Obtener la lista de productos desde la base de datos
        List<Articulos> productos = obj_productos.getAllProductosTable(conexion);

        // Llenar la tabla con los datos
        for (Articulos producto : productos) {
            modelo.addRow(new Object[]{
                producto.getCodigoproducto(),
                producto.getNombreproducto(),
                producto.getDescripcion(),
                producto.getMagnitud(),
                producto.getPrecio(),
                producto.getItbms(),
                producto.getFecha_registro(), // Usa getFechaRegistro() en lugar de getFecha_registro()
                producto.getFecha_actualizacion() // Usa getFechaActualizacion() en lugar de getFecha_actualizacion()
            });
        }
    }

    public void cargarServicios() {
        Connection conexion = Conexion.obtenerConexion();
        DefaultTableModel modelo = (DefaultTableModel) tbl_Servicios.getModel();

        // Limpiar cualquier contenido que pueda haber en la tabla actualmente
        modelo.setRowCount(0);

        // Crear una instancia de Articulos para obtener los datos de la base de datos
        Servicios obj_servicios = new Servicios();

        // Obtener la lista de productos desde la base de datos
        List<Servicios> servicios = obj_servicios.getAllProductosTable(conexion);

        // Llenar la tabla con los datos
        for (Servicios servicio : servicios) {
            modelo.addRow(new Object[]{
                servicio.getCodigoservicio(),
                servicio.getNombreservicio(),
                servicio.getDescripcion(),
                servicio.getTipocobro(),
                servicio.getPrecio(),
                servicio.getItbms(),
                servicio.getFecha_registro(), // Usa getFechaRegistro() en lugar de getFecha_registro()
                servicio.getFecha_actualizacion() // Usa getFechaActualizacion() en lugar de getFecha_actualizacion()
            });
        }
    }

    public void cargarClientes() {
        Connection conexion = Conexion.obtenerConexion();
        DefaultTableModel modelo = (DefaultTableModel) tbl_Clientes.getModel();

        // Limpiar cualquier contenido que pueda haber en la tabla actualmente
        modelo.setRowCount(0);

        // Crear una instancia de Clientes para obtener los datos de la base de datos
        Clientes obj_clientes = new Clientes();

        // Obtener la lista de clientes desde la base de datos
        List<Clientes> clientes = obj_clientes.getAllClientesTable(conexion);

        // Llenar la tabla con los datos
        for (Clientes cliente : clientes) {
            modelo.addRow(new Object[]{
                cliente.getCodigo_cliente(),
                cliente.getRuc(),
                cliente.getNombre(),
                cliente.getDireccion(),
                cliente.getTelefono1(),
                cliente.getTelefono2(),
                cliente.getCorreo(),
                cliente.getObservaciones(),
                cliente.getFecha_registro(),
                cliente.getFecha_actualizacion()
            });
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Articulos;
    private javax.swing.JPanel Clientes;
    private javax.swing.JPanel Servicios;
    private javax.swing.JPanel bg;
    private javax.swing.JButton btnActualizarC;
    private javax.swing.JButton btnActualizarP;
    private javax.swing.JButton btnActualizarS;
    private javax.swing.JButton btnBorrarC;
    private javax.swing.JButton btnBorrarP;
    private javax.swing.JButton btnBorrarS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPLCLientes;
    private javax.swing.JPanel jPLProductos;
    private javax.swing.JPanel jPLServicios;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tbl_Clientes;
    private javax.swing.JTable tbl_Productos;
    private javax.swing.JTable tbl_Servicios;
    // End of variables declaration//GEN-END:variables
}
